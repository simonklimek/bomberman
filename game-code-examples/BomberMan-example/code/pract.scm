(require graphics/graphics)
(include "board.scm")
(open-graphics)
(define (posn->cons p)
  (cons (/ (posn-x p) 50) (/ (posn-y p) 50)))
(define (level i)
  (define level-l (board-generator i))
  (init-board level-l)
  (define level-vec board-vec)
  (define (level-h)
    (begin
      (open-graphics)
      (define level-window (open-pixmap  "Bomberman-levels" 1150 650))
      (define (paste-image viewport pos image)
        (begin
          (send (vector-2d-ref level-vec (cdr (posn->cons pos)) (car (posn->cons pos))) set-image image)
          ((draw-pixmap viewport) image pos (make-rgb 0 0 0))))
      ((draw-pixmap level-window) "Images/bg.jpg" (make-posn 0 0) (make-rgb 0 0 0))
      (let([brick-wall "Images/brick-wall.jpg"]
           [power "Images/power.jpg"]
           [door "Images/door.jpg"]
           [perm-wall "Images/perm-wall.jpg"]) 
        (define (make-level)
          (define i 0)
          (define j 0)
          (define (make-level-h-1)
            (if(< i 13)
               (begin
                 (make-level-h-2 (vector-ref level-vec i))
                 (set! i (+ i 1))
                 (make-level-h-1))
               (set! i 0)))
          (define (make-level-h-2 vec)
            (if(< j 23)
               (begin
                 (cond[(and (odd? i)(odd? j))
                       (paste-image level-window (make-posn (* j 50) (* i 50)) perm-wall)]
                      [(send (vector-ref vec j) is-door?)
                       (paste-image level-window (make-posn (* j 50) (* i 50)) door)]
                      [(send (vector-ref vec j) is-brick-wall?)
                       (paste-image level-window (make-posn (* j 50) (* i 50)) brick-wall)]
                      [(send (vector-ref vec j) is-power?)
                       (paste-image level-window (make-posn (* j 50) (* i 50)) power)])
                 (set! j (+ j 1))
                 (make-level-h-2 vec))
               (set! j 0)))
          (make-level-h-1))
        (define (initialise)
          ((draw-pixmap level-window) "Images/bomby.png" (make-posn 0 0) (make-rgb 0 0 0)))
        (define (movement)
          (define current-posn (make-posn 0 0))
          (define (helper)
            (let ([key-press (ready-key-press window1)])
              (if (equal? #f key-press)
                  (helper)
                  (cond [(equal? 'right (key-value key-press)) 
                         (modify (make-posn (+ (posn-x current-posn) 50)
                                            (posn-y current-posn)))]
                        [(equal? 'left (key-value key-press)) 
                         (modify (make-posn (- (posn-x current-posn) 50)
                                            (posn-y current-posn)))]
                        [(equal? 'up (key-value key-press)) 
                         (modify (make-posn (posn-x current-posn)
                                            (- (posn-y current-posn) 50)))]
                        [(equal? 'down (key-value key-press)) 
                         (modify (make-posn (posn-x current-posn)
                                            (+ (posn-y current-posn) 50)))]
                        [else (helper)]))))
          (define (modify p)
            (if (or (< (posn-x p) 0)
                    (> (posn-x p) 1100)
                    (< (posn-y p) 0)
                    (> (posn-y p) 600)
                    (let ([pair (posn->cons p)])
                      (or (send (vector-2d-ref level-vec (cdr pair) (car pair)) is-brick-wall?)
                        (and (odd? (car pair)) (odd? (cdr pair))))))                
                (helper)
                (begin
                  (let ([pair (posn->cons current-posn)])
                    (paste-image level-window current-posn ;"Images/bg-block.jpg")
                                 (send (vector-2d-ref level-vec (cdr pair)
                                                                 (car pair)) get-image)))
                  (set! current-posn p)
                  ((draw-pixmap level-window) "Images/bomby.png" current-posn (make-rgb 0 0 0))
                  (copy-viewport level-window window1)
                  (helper))))
          (helper))
        (begin
          (initialise)
          (make-level)
          (copy-viewport level-window window1)
          (movement)))))
      (level-h))  